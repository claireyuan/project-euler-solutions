"""
Project Euler
Problem 27: Quadratic primes

Answer: -59231
"""

class PrimeChecker:
	"""
	Checks primality of numbers. Stores primes up to self.maxValue to make 
	multiple tests faster.
	"""
	def __init__(self):
		self.primes = [2, 3]
		self.maxValue = 3

	def __generatePrimesUpTo(self, upperBound):
		for i in xrange(self.maxValue + 1, upperBound + 1):
			if self.__isPrime(i):
				self.primes.append(i)
		self.maxValue = upperBound

	def __isPrime(self, n):
		for prime in self.primes:
			if n % prime == 0:
				return False
		return True

	def isPrime(self, n):
		if n > self.maxValue:
			self.__generatePrimesUpTo(n)
		return n in self.primes


class QuadraticPrimes:
	def __init__(self):
		self.primeChecker = PrimeChecker()

	def __applyQuadraticFormula(self, a, b, n):
		"""
		Evaluates the quadratic formula n^2 + an + b at the given value of n.
		"""
		return n * n + a * n + b

	def numPrimesGenerated(self, a, b):
		"""
		Returns the number of primes generated by evaluating the quadratic 
		at consecutive n = 0, 1, 2, ...
		"""
		n = 0
		while True:
			if not self.primeChecker.isPrime(self.__applyQuadraticFormula(a, b, n)):
				return n
			n += 1

	def getMaxQuadraticPrimes(self, coeffiecientUpperBound):
		"""
		Finds the quadratic formula of the form n^2 + an + b that produces the 
		largest number of primes for consecutive inputs n = 0, 1, 2, ...
		where |a| <= coeffiecientUpperBound and |b| <= coeffiecientUpperBound.
		"""
		bestN, bestA, bestB = 0, 0, 0
		for a in xrange(-coeffiecientUpperBound, coeffiecientUpperBound):
			for b in xrange(-coeffiecientUpperBound, coeffiecientUpperBound):
				if not self.primeChecker.isPrime(b):
					continue
				n = self.numPrimesGenerated(a, b)
				if n > bestN:
					bestN, bestA, bestB = n, a, b
		return bestA, bestB, bestN

	def getProductOfCoefficients(self, coeffiecientUpperBound):
		"""
		Calculates the product of the coefficients of the quadratic formula that 
		produces the largest sequence of primes generated by evaluating the 
		quadratic at consecutive values of n = 0, 1, 2, ...
		"""
		a, b, _ = self.getMaxQuadraticPrimes(coeffiecientUpperBound + 1)
		return a * b

print QuadraticPrimes().getProductOfCoefficients(1000)



